import sys
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import Qt
from PyQt5 import QtCore
from PyQt5 import QtWidgets


class Main_Window(QWidget):
    def __init__(self):
        # --------------------------主窗体--------------------------------------#
        super(Main_Window, self).__init__()
        # self.setGeometry(0, 0, 800, 600
        self.resize(800, 600)  # 设置窗口初始位置和大小
        self.center()  # 设置窗口居中
        self.setWindowTitle('Jarvis For Chat - 欢迎界面')  # 设置窗口标题
        # 主窗网格布局，基底
        self.main_layout = QGridLayout(self, spacing=0)

        self.main_layout.setContentsMargins(0, 0, 0, 0)
        self.setLayout(self.main_layout)
        # ------------------------左边菜单栏--------------------------------------#
        self.LeftTabWidget = QListWidget()
        self.LeftTabWidget.setFixedWidth(180)
        self.LeftTabWidget.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.LeftTabWidget.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.LeftTabWidget.setFrameShape(QListWidget.NoFrame)
        # 左侧组件设置
        self.left_layout = QVBoxLayout()
        self.LeftTabWidget.setLayout(self.left_layout)  # 将左侧布局（垂直）绑定到左侧组件上
        # 左侧布局
        self.main_layout.addWidget(self.LeftTabWidget, 2, 0)

        self.LeftTabWidget.currentRowChanged.connect(self.display)  # 绑定
        list_str = ['Welcome']
        for i in range(1):
            self.item = QListWidgetItem(list_str[i], self.LeftTabWidget)  # 左侧选项的添加
            self.item.setSizeHint(QSize(180, 80))
            # self.item.set(0,(i+1)*180)
            self.item.setTextAlignment(Qt.AlignCenter)  # 居中显示

        # --------------------左侧菜单栏头像------------------------------------------#
        self.avatar_layout = QGridLayout()
        self.main_layout.addLayout(self.avatar_layout, 0, 0)

        self.avatar = QtWidgets.QPushButton()
        self.avatar.setFixedSize(QSize(180, 180))
        self.avatar.setIcon(QIcon(r'Resource/images/LOGO.jpg'))
        self.avatar.setIconSize(QSize(180, 180))
        self.avatar_layout.addWidget(self.avatar)
        # self.avatar_layout.setAlignment(self.avatar_layout,Qt.AlignRight)

        self.weixin = QtWidgets.QPushButton()
        self.weixin.setFixedSize(QSize(45, 45))
        self.weixin.setIcon(QIcon(r'Resource/images/weixin1.png'))
        #self.avatar_layout.addWidget(self.weixin, 2, 4, 1, 1)
        #self.avatar_layout.setAlignment(self.weixin, Qt.AlignRight)
        #self.avatar_layout.setAlignment(self.weixin, Qt.AlignBottom)

        # --------------------------右边页面-------------------------------------------#
        # 在QStackedWidget对象中填充了4个子控件
        self.stack = QStackedWidget(self)
        self.right_layout = QGridLayout()
        # self.main_layout.addLayout(self.right_layout,0,5)
        self.stack.setLayout(self.right_layout)
        self.main_layout.addWidget(self.stack, 0, 1, 14, 14)
        # self.stack.setMinimumSize(620,600)

        # 创建4个小控件和函数
        self.stack1 = QWidget()

        self.stack1UI()

        self.stack.addWidget(self.stack1)

    def center(self):  # 设置窗口居中
        self.qr = self.frameGeometry()
        self.cp = QDesktopWidget().availableGeometry().center()
        self.qr.moveCenter(self.cp)
        self.move(self.qr.topLeft())

    # Weoclome
    def stack1UI(self):
        # 水平布局
        self.layout = QVBoxLayout()
        self.layout.setContentsMargins(0, 0, 0, 0)

        # 图片
        #self.logo = QPixmap('Resource/images/LOGO.jpg')
        #self.logo_1abel = QLabel(self)
        #self.logo_1abel.setGeometry(0, 0, 150, 150)
        # lbl.setScaledContents (True)  # 让图片自适应label大小
        # self.logo_label.setStyleSheet("border: 2px solid blue")
        #self.logo_1abel.setPixmap(self.logo)

        # 提示文字
        self.text_1 = QLabel('Welcome！', self)
        self.text_2 = QLabel('欢迎使用Jarvis For Chat',self)
        self.text_3 = QLabel('开启你的数据之旅',self)

        # 检测按钮
        self.pushButton = QPushButton(self)
        #self.pushButton.setIcon(QIcon(QPixmap('Resource/images/one-way-friend/button.png')))  # icon
        self.pushButton.setText("立即检测")  # text
        # self.pushButton.setShortcut('Ctrl+D')#shortcut key

        # 间隔区
        self.spacer_1 = QtWidgets.QSpacerItem(10, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        #self.spacer_2 = QtWidgets.QSpacerItem(10, 3, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.spacer_3 = QtWidgets.QSpacerItem(10, 30, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)

        ##点击信号与槽函数进行连接，这一步实现：在控制台输出被点击的按钮
        self.pushButton.clicked.connect(lambda: self.whichbtn(self.pushButton))

        # 实现单向好友检测
        self.pushButton.clicked.connect(lambda: self.person_homepage(self.pushButton))
        self.pushButton.setToolTip("立即检测")  # Tool tip

        # 添加控件
        self.layout.addItem(self.spacer_1)
        #self.layout.addWidget(self.logo_1abel, 0, QtCore.Qt.AlignHCenter)
        #self.layout.addItem(self.spacer_2)
        self.layout.addWidget(self.text_1, 0, QtCore.Qt.AlignHCenter)
        self.layout.addWidget(self.text_2, 0, QtCore.Qt.AlignHCenter)
        self.layout.addWidget(self.pushButton, 0, QtCore.Qt.AlignHCenter)
        self.layout.addWidget(self.text_3, 0, QtCore.Qt.AlignHCenter)
        self.layout.addItem(self.spacer_3)

        #设置布局
        self.stack1.setLayout(self.layout)


    def person_homepage(self):
        pass
        #Dialog = QtWidgets.QDialog()
        #ui = Ui_Dialog()
        #ui.setupUi(Dialog)
        #Dialog.show()
        #Dialog.exec_()

    def whichbtn(self, btn):
        # 输出被点击的按钮
        print('clicked button is ' + btn.text())

    # __________________单向好友检测___________________#

    def display(self, i):
        # 设置当前可见的选项卡的索引
        self.stack.setCurrentIndex(i)


# ----------------右边页面的类-------------#


# ---------------主函数------------------------#

if __name__ == '__main__':
    app = QApplication(sys.argv)
    style = open(r"QSS/MetroUI.qss", "r", encoding='utf-8')
    style_str = style.read()
    # app.setStyleSheet(style_str)

    demo = Main_Window()
    demo.show()
    sys.exit(app.exec_())
